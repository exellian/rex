use rex::{idref, childs, attrs, Config, ChildFn, AttributeFn, ChildValue, AttributeValue}; use structx::*; pub type Props<T,T1> = Structx!{ items: Vec<Structx!{ age: T }>,products: Vec<Structx!{ name: T1 }> }; pub fn render<T: Render,T1: Render, C: Config>(props: &Props<T,T1>) -> Vec<C::Node> {C::el("test", attrs!{"name" => C::attr("Hallo Welt"),"test" => C::attr(C::el::<()>("div", attrs!{}, id!(), childs![(C::text("Hallo", true)).flatten(),(C::text("hafksjdlfj", true)).flatten()], true))}, id!("wrapper";0), childs![(C::el::<()>("div", attrs!{"class" => C::attr("well-done")}, id!(), childs![(C::el::<()>("a", attrs!{"href" => C::attr("https://localhost:8000/post")}, id!(), childs![], false)).flatten()], false)).flatten(),C::text(&(3243 + 32324), false),C::text((props.products).iter().map(|product| {(props.products).iter().map(|product1| {&(product1).name}).collect::<Vec<_>>()}).collect::<Vec<_>>(), false),(C::el::<()>("ul", attrs!{}, id!(), childs![((props.items).iter().map(|x| {C::el::<()>("li", attrs!{}, id!(), childs![C::text(&(x).age, false)], false)}).collect::<Vec<_>>()).flatten()], false)).flatten()], false)}