use rex::{Config, ChildFn, AttributeFn, ChildValue, AttributeValue}; use structx::*; pub type Props<T,T1> = Structx!{ items: Vec<Structx!{ age: T }>,products: Vec<Structx!{ name: T1 }> }; pub fn render<T: Render,T1: Render, C: Config>(props: &Props<T,T1>) -> Vec<C::Node> {C::el("test", || HashMap::from([("name".to_string(), C::attr("Hallo Welt")),("test".to_string(), C::attr(C::el("div", || HashMap::from([]), || vec![(C::text("Hallo", true)).flatten(),
(C::text("hafksjdlfj", true)).flatten()].flatten(), true)))]), || vec![(C::el("div", || HashMap::from([("class".to_string(), C::attr("well-done"))]), || vec![(C::el("a", || HashMap::from([("href".to_string(), C::attr("https://localhost:8000/post"))]), || vec![], false)).flatten()].flatten(), false)).flatten(),
C::text(&(3243 + 32324), false),
C::text((props.products).iter().map(|product| {(props.products).iter().map(|product1| {&(product1).name}).collect::<Vec<_>>()}).collect::<Vec<_>>(), false),
(C::el("ul", || HashMap::from([]), || vec![((props.items).iter().map(|x| {C::el("li", || HashMap::from([]), || vec![C::text(&(x).age, false)].flatten(), false)}).collect::<Vec<_>>()).flatten()].flatten(), false)).flatten()].flatten(), false)}