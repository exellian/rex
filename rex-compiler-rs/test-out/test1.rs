use rex::{Config, ChildFn, AttributeFn, ChildValue, AttributeValue}; use structx::*; pub type Props<T: Render,T1: Render> = Structx!{ items: Vec<Structx!{ age: T }>,products: Vec<Structx!{ name: T1 }> }; pub fn render<'props, T: Render,T1: Render, NODE: Node>(props: &'props Props<T,T1>, config: &'props Config<NODE>) -> impl Flatten<Node=NODE> {(config.el)("test", HashMap::from([("name".to_string(), Box::new(|| { Box::new("Hallo Welt") as AttributeValue<'props> }) as AttributeFn<'props>)]), vec![Box::new(|| { Box::new((config.el)("div", HashMap::from([("class".to_string(), Box::new(|| { Box::new("well-done") as AttributeValue<'props> }) as AttributeFn<'props>)]), vec![Box::new(|| { Box::new((config.el)("a", HashMap::from([("href".to_string(), Box::new(|| { Box::new("https://localhost:8000/post") as AttributeValue<'props> }) as AttributeFn<'props>)]), vec![])) as ChildValue<'props, NODE> }) as ChildFn<'props, NODE>])) as ChildValue<'props, NODE> }) as ChildFn<'props, NODE>,
Box::new(|| { Box::new((config.text)(&((&props.products).into_iter().map(|product| {(&props.products).into_iter().map(|product1| {&(&product1).name}).collect::<Vec<_>>()}).collect::<Vec<_>>()).render())) as ChildValue<'props, NODE> }) as ChildFn<'props, NODE>,
Box::new(|| { Box::new((config.el)("ul", HashMap::from([]), vec![Box::new(|| { Box::new((&props.items).into_iter().map(|x| {(config.el)("li", HashMap::from([]), vec![Box::new(|| { Box::new((config.text)(&(&(&x).age).render())) as ChildValue<'props, NODE> }) as ChildFn<'props, NODE>])}).collect::<Vec<_>>()) as ChildValue<'props, NODE> }) as ChildFn<'props, NODE>])) as ChildValue<'props, NODE> }) as ChildFn<'props, NODE>])}