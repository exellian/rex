use rex::{Config, ChildFn, AttributeFn, ChildValue, AttributeValue}; use structx::*; pub type Props<T: Render> = Structx!{ products: Vec<Structx!{ name: T }> }; pub fn render<'props, T: Render, NODE: Node>(props: &'props Props<T>, config: &'props Config<NODE>) -> impl Flattenable<Node=NODE> {(config.el)("test", HashMap::from([("name".to_string(), Box::new(|| { Box::new((config.el)("div", HashMap::from([]), vec![])) as AttributeValue<'props> }) as AttributeFn<'props>)]), vec![Box::new(|| { Box::new((config.text)(&((&props.products).into_iter().map(|product| {(&props.products).into_iter().map(|product1| {&(&product1).name}).collect::<Vec<_>>()}).collect::<Vec<_>>()).render())) as ChildValue<'props, NODE> }) as ChildFn<'props, NODE>])}